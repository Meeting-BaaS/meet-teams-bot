#!/bin/bash

# Script de test pour macOS - Meet Teams Bot
# Teste les fonctionnalit√©s disponibles sur macOS

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info "=== Test Meet Teams Bot sur macOS ==="

# 1. V√©rifier l'environnement
print_info "V√©rification de l'environnement..."
echo "OS: $(uname -s)"
echo "Architecture: $(uname -m)"
echo "R√©pertoire: $(pwd)"

# 2. V√©rifier Nix
if command -v nix-shell &> /dev/null; then
    print_success "Nix install√©: $(nix-shell --version)"
else
    print_error "Nix non install√©"
    exit 1
fi

# 3. V√©rifier Node.js via Nix
print_info "Test de Node.js via Nix..."
NODE_VERSION=$(nix-shell --run "node --version" 2>/dev/null || echo "Erreur")
if [[ $NODE_VERSION == v* ]]; then
    print_success "Node.js disponible: $NODE_VERSION"
else
    print_error "Node.js non disponible via Nix"
fi

# 4. V√©rifier FFmpeg via Nix
print_info "Test de FFmpeg via Nix..."
FFMPEG_VERSION=$(nix-shell --run "ffmpeg -version 2>/dev/null | head -1" || echo "Erreur")
if [[ $FFMPEG_VERSION == ffmpeg* ]]; then
    print_success "FFmpeg disponible"
    echo "  $FFMPEG_VERSION"
else
    print_error "FFmpeg non disponible via Nix"
fi

# 5. V√©rifier les d√©pendances du projet
print_info "V√©rification des d√©pendances du projet..."

if [ -d "recording_server/node_modules" ]; then
    print_success "D√©pendances Node.js install√©es"
else
    print_warning "D√©pendances non install√©es, lancement de l'installation..."
    ./run_bot_nix.sh setup
fi

if [ -d "recording_server/build" ]; then
    print_success "Projet compil√©"
else
    print_warning "Projet non compil√©"
fi

# 6. Test des dispositifs audio/vid√©o sur macOS
print_info "=== Test des dispositifs macOS ==="

# Tester les dispositifs audio disponibles
print_info "Dispositifs audio macOS:"
if command -v system_profiler &> /dev/null; then
    system_profiler SPAudioDataType | grep -E "(Name|Type):" | head -10
else
    print_warning "system_profiler non disponible"
fi

# Tester les cam√©ras disponibles
print_info "Cam√©ras macOS:"
if command -v system_profiler &> /dev/null; then
    system_profiler SPCameraDataType 2>/dev/null | grep -E "Model ID" || print_info "Aucune cam√©ra externe d√©tect√©e"
else
    print_warning "system_profiler non disponible"
fi

# 7. Test media_context.ts avec les valeurs actuelles
print_info "=== Test de media_context.ts ==="

print_info "Configuration actuelle dans media_context.ts:"
if [ -f "recording_server/src/media_context.ts" ]; then
    echo "MICRO_DEVICE: $(grep 'const MICRO_DEVICE' recording_server/src/media_context.ts)"
    echo "CAMERA_DEVICE: $(grep 'const CAMERA_DEVICE' recording_server/src/media_context.ts)"
    
    # Analyser les limitations
    print_warning "Limitations sur macOS:"
    echo "  ‚Ä¢ /dev/video10 n'existe pas sur macOS"
    echo "  ‚Ä¢ pulse:virtual_mic_source n√©cessite PulseAudio"
    echo "  ‚Ä¢ v4l2loopback est sp√©cifique √† Linux"
    
    print_info "Alternatives macOS:"
    echo "  ‚Ä¢ Utiliser AVFoundation pour les cam√©ras"
    echo "  ‚Ä¢ Utiliser CoreAudio pour l'audio"
    echo "  ‚Ä¢ Utiliser des outils tiers comme OBS Virtual Camera"
else
    print_error "media_context.ts non trouv√©"
fi

# 8. Test de FFmpeg avec les dispositifs macOS
print_info "=== Test FFmpeg avec dispositifs macOS ==="

print_info "Test des sources audio macOS:"
nix-shell --run "ffmpeg -f avfoundation -list_devices true -i \"\" 2>&1 | head -20" || print_warning "Erreur lors du test audio"

print_info "Test des sources vid√©o macOS:"
nix-shell --run "ffmpeg -f avfoundation -list_devices true -i \"\" 2>&1 | grep video" || print_warning "Erreur lors du test vid√©o"

# 9. Test d'ex√©cution basique
print_info "=== Test d'ex√©cution du bot ==="

if [ -f "params.json" ]; then
    print_info "Configuration trouv√©e dans params.json:"
    cat params.json | head -5
    
    print_info "Test de g√©n√©ration d'UUID et validation JSON..."
    # Test sans vraiment ex√©cuter le bot
    TEST_JSON=$(echo '{"meeting_url":"https://meet.google.com/test-test-test", "bot_name":"TestBot"}')
    echo "JSON de test: $TEST_JSON"
    print_success "Configuration JSON valide"
else
    print_error "params.json non trouv√©"
fi

# 10. Recommandations
print_info "=== Recommandations pour macOS ==="

print_success "‚úÖ Ce qui fonctionne:"
echo "  ‚Ä¢ Nix environment avec Node.js 20"
echo "  ‚Ä¢ Compilation TypeScript/Webpack"
echo "  ‚Ä¢ FFmpeg pour l'enregistrement"
echo "  ‚Ä¢ Extension Chrome"
echo "  ‚Ä¢ Bot de meeting (sans dispositifs virtuels)"

print_warning "‚ö†Ô∏è  Limitations sur macOS:"
echo "  ‚Ä¢ Pas de dispositifs virtuels /dev/video10"
echo "  ‚Ä¢ PulseAudio remplac√© par CoreAudio"
echo "  ‚Ä¢ Commandes ffmpeg diff√©rentes pour macOS"

print_info "üõ†Ô∏è  Solutions alternatives:"
echo "  ‚Ä¢ Installer OBS Studio + OBS Virtual Camera"
echo "  ‚Ä¢ Utiliser BlackHole pour l'audio virtuel"
echo "  ‚Ä¢ Modifier media_context.ts pour macOS"
echo "  ‚Ä¢ Utiliser ScreenCaptureKit (macOS 12.3+)"

print_info "=== Test complet termin√© ==="

# 11. Test d'ex√©cution r√©el (optionnel)
print_info "Voulez-vous tester l'ex√©cution r√©elle du bot ? (y/N)"
read -r -n 1 REPLY
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Test d'ex√©cution avec configuration de test..."
    print_warning "Note: Les dispositifs virtuels ne fonctionneront pas sur macOS"
    
    # Cr√©er une config de test
    cat > test_params.json << EOF
{
    "meeting_url": "https://meet.google.com/test-test-test",
    "bot_name": "Test Bot macOS",
    "recording_mode": "SpeakerView",
    "automatic_leave": {
        "waiting_room_timeout": 10,
        "noone_joined_timeout": 10
    }
}
EOF

    print_info "Ex√©cution du bot avec configuration de test..."
    timeout 30 ./run_bot_nix.sh run test_params.json 2>&1 | head -50 || print_info "Test d'ex√©cution termin√©"
    
    # Nettoyer
    rm -f test_params.json
else
    print_info "Test d'ex√©cution ignor√©"
fi

print_success "Tests termin√©s ! Consultez les recommandations ci-dessus." 